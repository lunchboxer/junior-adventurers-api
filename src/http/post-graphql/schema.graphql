type AuthPayload {
  token: String
  user: User
}

type Mutation {
  createStudent(birthdate: String, languages: String, name: String): Student
  deleteStudent(key: ID!): Student
  updateStudent(
    key: ID!
    name: String
    birthdate: String
    languages: String
    credit: Int
  ): Student
  resetCredit(studentIds: [ID!]!, credit: Int!): [Student]
  createUser(email: String!, name: String, password: String!): AuthPayload
  deleteUser(key: ID!): User
  login(email: String!, password: String!): AuthPayload
  updateUser(email: String, key: ID!, name: String): User
  changePassword(newPassword: String!, oldPassword: String!): User
}

type Query {
  me: User
  student(key: ID): Student
  students: [Student]
  user(key: ID!): User
  userCount: Int
  users: [User]
  schoolyear(key: ID): Schoolyear
  schoolyears: [Schoolyear]
}

type Student {
  birthdate: String
  key: ID
  languages: String
  name: String
  credit: Int
}

type User {
  email: String
  isVerified: Boolean
  key: ID
  name: String
}

type Schoolyear {
  key: ID
  name: String
  startdate: String
  enddate: String
}

type Group {
  key: ID
  name: String
  schoolyear: Schoolyear
}

type OutOfClassTime {
  key: ID
  student: Student
  leftTime: String
  returnTime: String
}
